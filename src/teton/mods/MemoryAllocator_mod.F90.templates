! This source contains the subroutine implementations for a family of overloaded functions
! in the MemoryAllocator module.

#include "macros.h"
#include "ftm_utils.h"

#if !defined(FTM_RANK)
#  error FTM_RANK must be defined for memory allocator function templates.
#endif

#if FTM_RANK == 1
#  define FTM_RANK_STRING :
#  define FTM_DIMS dim1
#elif FTM_RANK == 2
#  define FTM_RANK_STRING :,:
#  define FTM_DIMS dim1, dim2
#elif FTM_RANK == 3
#  define FTM_RANK_STRING :,:,:
#  define FTM_DIMS dim1, dim2, dim3
#elif FTM_RANK == 4
#  define FTM_RANK_STRING :,:,:,:
#  define FTM_DIMS dim1, dim2, dim3, dim4
#else
#  error Support for FTM_RANK > 4 not added yet to memory allocation function templates.
#endif

!-----------------------------------------------------------------------------
! C_DOUBLE subroutines
!-----------------------------------------------------------------------------
   subroutine FTM_CAT4(allocate_host,real,c_double,FTM_RANK) (self, preferUmpire, parentName, varName, varPtr, FTM_DIMS)
      class(AllocatorType) :: self
      logical, intent(in) :: preferUmpire
      character(len=*), intent(in) :: parentName
      character(len=*), intent(in) :: varName
      real(kind=c_double), pointer, contiguous, dimension( FTM_RANK_STRING ), intent(inout) :: varPtr
      integer :: FTM_DIMS

      integer, dimension( FTM_RANK ) :: theShape

      theShape = [ FTM_DIMS ]

!$omp critical
      TETON_VERIFY(.NOT. associated(varPtr), "MemoryAllocator: Unable to allocate memory for "//parentName//"/"//varName//", pointer is already associated!")
      nullify(varPtr)

      if (preferUmpire .AND. self%host_allocator_present) then
#if defined(TETON_ENABLE_UMPIRE)
         call self%umpire_host_allocator%allocate(varPtr, theShape)
#endif
      else
         allocate( varPtr( FTM_DIMS ))
      endif

      TETON_VERIFY(associated(varPtr), "MemoryAllocator: Allocation failed for "//parentName//"/"//varName//".")

      varPtr( FTM_RANK_STRING ) = 0.0

!$omp end critical

      return
   end subroutine FTM_CAT4(allocate_host,real,c_double,FTM_RANK)
!-----------------------------------------------------------------------------
   subroutine FTM_CAT4(deallocate_host,real,c_double,FTM_RANK) (self, preferUmpire, parentName, varName, varPtr)
      class(AllocatorType) :: self
      logical, intent(in) :: preferUmpire
      character(len=*), intent(in) :: parentName
      character(len=*), intent(in) :: varName
      real(kind=c_double), pointer, contiguous, dimension( FTM_RANK_STRING ), intent(inout) :: varPtr

!$omp critical
      if (preferUmpire .AND. self%host_allocator_present) then
#if defined(TETON_ENABLE_UMPIRE)
      call self%umpire_host_allocator%deallocate(varPtr)
#endif
      else
         deallocate( varPtr )
      endif

!$omp end critical

      return
   end subroutine FTM_CAT4(deallocate_host,real,c_double,FTM_RANK)

!-----------------------------------------------------------------------------
! C_INT subroutines
!-----------------------------------------------------------------------------
   subroutine FTM_CAT4(allocate_host,integer,c_int,FTM_RANK) (self, preferUmpire, parentName, varName, varPtr, FTM_DIMS)
      class(AllocatorType) :: self
      logical, intent(in) :: preferUmpire
      character(len=*), intent(in) :: parentName
      character(len=*), intent(in) :: varName
      integer(kind=c_int), pointer, contiguous, dimension( FTM_RANK_STRING ), intent(inout) :: varPtr
      integer :: FTM_DIMS

      integer, dimension( FTM_RANK ) :: theShape

      theShape = [ FTM_DIMS ]

!$omp critical
      TETON_VERIFY(.NOT. associated(varPtr), "MemoryAllocator: Unable to allocate memory for "//parentName//"/"//varName//", pointer is already associated!")
      nullify(varPtr)

      if (preferUmpire .AND. self%host_allocator_present) then
#if defined(TETON_ENABLE_UMPIRE)
         call self%umpire_host_allocator%allocate(varPtr, theShape)
#else
         TETON_FATAL("MemoryAllocator: Unable to allocate in pinned memory, Teton was not compiled with Umpire support.")
#endif
      else
         allocate( varPtr( FTM_DIMS ) )
      endif

      TETON_VERIFY(associated(varPtr), "MemoryAllocator: Allocation failed for "//parentName//"/"//varName//".")

      varPtr( FTM_RANK_STRING ) = 0

!$omp end critical

      return
   end subroutine FTM_CAT4(allocate_host,integer,c_int,FTM_RANK)
!-----------------------------------------------------------------------------
   subroutine FTM_CAT4(deallocate_host,integer,c_int,FTM_RANK) (self, preferUmpire, parentName, varName, varPtr)

      class(AllocatorType) :: self
      logical, intent(in) :: preferUmpire
      character(len=*), intent(in) :: parentName
      character(len=*), intent(in) :: varName
      integer(kind=c_int), pointer, contiguous, dimension( FTM_RANK_STRING ), intent(inout) :: varPtr

!$omp critical
      if (preferUmpire .AND. self%host_allocator_present) then
#if defined(TETON_ENABLE_UMPIRE)
      call self%umpire_host_allocator%deallocate(varPtr)
#endif
      else
         deallocate( varPtr )
      endif

!$omp end critical

      return
   end subroutine FTM_CAT4(deallocate_host,integer,c_int,FTM_RANK)
!-----------------------------------------------------------------------------

#undef FTM_DIMS
#undef FTM_RANK_STRING
#undef FTM_RANK
